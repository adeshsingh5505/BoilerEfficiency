model = Sequential([
    Dense(128, input_shape=(X_train.shape[1],), kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),
    Dense(64, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),
    Dense(32, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.2),
    Dense(16, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dense(1)
])
O/P:   ðŸ“Š Evaluation Metrics:
ðŸ”¹ Mean Squared Error (MSE): 2.3258
ðŸ”¹ Root Mean Squared Error (RMSE): 1.5250
ðŸ”¹ Mean Absolute Error (MAE): 1.1459
ðŸ”¹ RÂ² Score: 0.8759
ðŸ”¹ Tolerance Accuracy (Â±5%): 1.0000

model = Sequential([
    Dense(1, input_shape=(X_train.shape[1],), kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01)
])
O/P: 
ðŸ“Š Evaluation Metrics:
ðŸ”¹ Mean Squared Error (MSE): 206319.3764
ðŸ”¹ Root Mean Squared Error (RMSE): 454.2239
ðŸ”¹ Mean Absolute Error (MAE): 431.6342
ðŸ”¹ RÂ² Score: -11005.5049
ðŸ”¹ Tolerance Accuracy (Â±5%): 0.0091

model = Sequential([
    Dense(256, input_shape=(X_train.shape[1],), kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),

    Dense(128, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),

    Dense(64, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.2),

    Dense(32, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),

    Dense(1)  # Output layer
])
O/P: ðŸ“Š Evaluation Metrics:
ðŸ”¹ Mean Squared Error (MSE): 1.9228
ðŸ”¹ Root Mean Squared Error (RMSE): 1.3867
ðŸ”¹ Mean Absolute Error (MAE): 1.0522
ðŸ”¹ RÂ² Score: 0.8974
ðŸ”¹ Tolerance Accuracy (Â±5%): 1.0000
