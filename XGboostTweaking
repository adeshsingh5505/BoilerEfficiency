1.  'max_depth': [32],
    'learning_rate': [0.05],
    'n_estimators': [100],
    'subsample': [0.8],
    'colsample_bytree': [0.8],
    'gamma': [0],
    'reg_alpha': [0],
    'reg_lambda': [1]
R2 Score: 0.9358286574628382
MAE:  0.814618361579047

2.'max_depth': [16],
R2 Score: 0.9932316499066184
MAE:  0.20732377822310807

3.'max_depth': [32],
R2 Score: 0.9933663697621257
MAE:  0.2013116342050055

4.'max_depth': [16],
    'learning_rate': [0.1],
    'n_estimators': [100],
    'subsample': [0.8],
    'colsample_bytree': [0.8],
    'gamma': [0],
    'reg_alpha': [0],
    'reg_lambda': [1]
R2 Score: 0.9927412226523624
MAE:  0.21282930091575306

5.'learning_rate': [0.2],
R2 Score: 0.9896485796749962
MAE:  0.25828801430596243

6.'learning_rate': [0.05],
R2 Score: 0.9932316499066184
MAE:  0.20732377822310807

7.'learning_rate': [0.025],
R2 Score: 0.9797788029647443
MAE:  0.44891964283695895







##ANN MODEL 
model = Sequential([
    Dense(128, input_shape=(X_train.shape[1],), kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),
    Dense(64, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.3),
    Dense(32, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dropout(0.2),
    Dense(16, kernel_regularizer=l2(0.01)),
    LeakyReLU(alpha=0.01),
    BatchNormalization(),
    Dense(1)
])
O/P:  ðŸ“Š Evaluation Metrics:
ðŸ”¹ Mean Squared Error (MSE): 2.3258
ðŸ”¹ Root Mean Squared Error (RMSE): 1.5250
ðŸ”¹ Mean Absolute Error (MAE): 1.1459
ðŸ”¹ RÂ² Score: 0.8759
ðŸ”¹ Tolerance Accuracy (Â±5%): 1.0000

